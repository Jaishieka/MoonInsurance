name: CI/CD Pipeline

on:
  workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push Docker Images
        run: |
          declare -A services=( 
            ["Agent_MS"]="agent-ms" 
            ["Integration_MS"]="integration-ms" 
            ["Notification_MS"]="notification-ms" 
            ["Aggregator_MS"]="aggregator-ms" 
          )

          for folder in "${!services[@]}"; do
            image_name=${services[$folder]}
            echo "ðŸ”§ Building image: $image_name from folder: $folder"

            docker build -t $image_name ./$folder
            docker tag $image_name:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$image_name:latest
            docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$image_name:latest
          done

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name mooninsurance-cluster

      # Step 1: Deploy to Blue Environment
      - name: Deploy to Blue Environment
        run: |
          kubectl apply -f k8s/deployment/blue/
          kubectl apply -f k8s/service/blue/

      # Step 2: Deploy to Green Environment
      - name: Deploy to Green Environment
        run: |
          echo " Deleting existing green deployments..."

          deployments=("agent-service-green" "integration-service-green" "notification-service-green")
          for dep in "${deployments[@]}"; do
            kubectl delete deployment "$dep" --ignore-not-found --wait
          done

          kubectl apply -f k8s/deployment/green/
          kubectl apply -f k8s/service/green/

      #  Step 3: Deploy Aggregator CronJob
      - name: Deploy Aggregator CronJob
        run: |
          kubectl apply -f k8s/cronjob/aggregator-cronjob.yaml

      # Step 4: Run Integration Tests
      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."

          SERVICES=("agent-service" "integration-service" "notification-service")
          URLS=()

          for svc in "${SERVICES[@]}"; do
            echo "Checking LoadBalancer for $svc..."
            url=""
            while [ -z "$url" ]; do
              echo "Waiting for $svc LoadBalancer IP..."
              sleep 10
              url=$(kubectl get svc "$svc" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            done
            echo "$svc is available at $url"
            URLS+=("$url")
          done

          AGENT_SERVICE_URL=${URLS[0]}
          INTEGRATION_SERVICE_URL=${URLS[1]}
          NOTIFICATION_SERVICE_URL=${URLS[2]}

          echo "Testing /health endpoints..."

          curl --fail "http://$AGENT_SERVICE_URL/health" || exit 1
          curl --fail "http://$INTEGRATION_SERVICE_URL/health" || exit 1
          curl --fail "http://$NOTIFICATION_SERVICE_URL/health" || exit 1

          echo "All services are healthy."

      # Step 5: Switch Traffic to Green
      - name: Switch Traffic to Green
        run: |
          kubectl apply -f k8s/service/green/service-agent.yaml
          kubectl apply -f k8s/service/green/service-integration.yaml
          kubectl apply -f k8s/service/green/service-notification.yaml

      # Step 6: Clean up Blue Environment (Optional)
      - name: Clean Up Blue Environment (Optional)
        run: |
          echo " Cleaning up blue environment..."
          kubectl delete deployment --selector=environment=blue
